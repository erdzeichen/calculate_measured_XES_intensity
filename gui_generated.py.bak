#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.7 (standalone edition) on Sun Apr 21 21:42:50 2013
#

import wx
import python_calculation as pc
reload(pc)
import pandas as pd
import os
file_path=os.path.dirname(os.path.realpath(__file__))
database_path=file_path+os.sep+'databases'

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.SIMPLE_BORDER | wx.RESIZE_BORDER | wx.FRAME_TOOL_WINDOW | wx.TAB_TRAVERSAL | wx.CLIP_CHILDREN
		wx.Frame.__init__(self, *args, **kwds)
		self.MainFrame_statusbar = self.CreateStatusBar(1, 0)
		self.DetecSetup = wx.Notebook(self, wx.ID_ANY, style=0)
		self.Crystal_based = wx.Panel(self.DetecSetup, wx.ID_ANY)
		self.AngleLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Angle at the sample"), style=wx.ALIGN_CENTRE)
		self.ThetaLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Theta "), style=wx.ALIGN_CENTRE)
		self.PhiLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Phi"), style=wx.ALIGN_CENTRE)
		self.Theta = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.Phi = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.ThicknessLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Thickness of Sample in mm"), style=wx.ALIGN_CENTRE)
		self.Thickness = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.bitmap_1 = wx.StaticBitmap(self.Crystal_based, wx.ID_ANY, wx.Bitmap("geometry.png", wx.BITMAP_TYPE_ANY))
		self.Crystals = wx.RadioBox(self.Crystal_based, wx.ID_ANY, _("Number of crystals"), choices=[_("1"), _("2"), _("3"), _("4"), _("5")], majorDimension=5, style=wx.RA_SPECIFY_COLS)
		self.DetecDisLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Detector Distance "), style=wx.ALIGN_CENTRE)
		self.DetecDis = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.DetecRadiusLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("DetecRadius"), style=wx.ALIGN_CENTRE)
		self.DetecRadius = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.DetecLineLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Fudge factor (DetecLine)"), style=wx.ALIGN_CENTRE)
		self.DetecLine = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.DetecAbsorbLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Detector Absorption"), style=wx.ALIGN_CENTRE)
		self.DetecAbsorb = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.BeamFluxLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Photons in in photons/s"))
		self.BeamFlux = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.EnergyLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Single Energy in eV"), style=wx.ALIGN_CENTRE)
		self.EnInLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("EnIn"), style=wx.ALIGN_CENTRE)
		self.EnIn = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_CENTRE)
		self.EnOutLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("EnOut"), style=wx.ALIGN_CENTRE)
		self.EnOut = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_CENTRE)
		self.CountsLabel = wx.StaticText(self.Crystal_based, wx.ID_ANY, _("Measured in counts/s"))
		self.Counts = wx.TextCtrl(self.Crystal_based, wx.ID_ANY, "", style=wx.TE_READONLY | wx.TE_CENTRE)
		self.DirectBased = wx.Panel(self.DetecSetup, wx.ID_ANY)
		self.mainModul = wx.Panel(self, wx.ID_ANY)
		self.panel_1 = wx.Panel(self.mainModul, wx.ID_ANY)
		self.SamlaneLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("Sample   "))
		self.sample_formulaLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("sample\nformula"))
		self.sample_formula = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.Absorber = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.concentrationLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("concentration\ndensity"))
		self.conEnter = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.con_type_choice = wx.Choice(self.panel_1, wx.ID_ANY, choices=[_("Molar in mMol/l"), _("Density in g/cm^3")])
		self.relationLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("(optional) relation between \nfirst and second sample"))
		self.relation_choice = wx.Choice(self.panel_1, wx.ID_ANY, choices=[_("None"), _("Mass %"), _("Molar from sample")])
		self.relationNumber = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
		self.relation_additionLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("If this is set the Sample density \nwill be calculated automaticly on execution"))
		self.sam2laneLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("Sample 2"))
		self.sample2_formulaLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("Sample2\nformula"))
		self.sample_2_formula = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.con2label = wx.StaticText(self.panel_1, wx.ID_ANY, _("concentration\ndensity"))
		self.con2Enter = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.con2_type_choice = wx.Choice(self.panel_1, wx.ID_ANY, choices=[_("Molar in mMol/l"), _("density in g/cm^3")])
		self.SolventlaneLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("Solvent  "))
		self.solvent_formulaLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("solvent\nformula"))
		self.solvent_formula = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.selectsolvent = wx.Choice(self.panel_1, wx.ID_ANY, choices=[])
		self.SolDenLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("Solvent Density\nin g/cm^3"))
		self.SolDen = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.SolConLabel = wx.StaticText(self.panel_1, wx.ID_ANY, _("Solvent Con.\nto water in %"))
		self.SolCon = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.m_faclabel = wx.StaticText(self.mainModul, wx.ID_ANY, _("M-factor for self absorption\nis multiplied to absorber \ncrossection"))
		self.m_fac = wx.TextCtrl(self.mainModul, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.linesLabel = wx.StaticText(self.mainModul, wx.ID_ANY, _("Emission\nLines"))
		self.lines = wx.Choice(self.mainModul, wx.ID_ANY, choices=[])
		self.pseudoName = wx.Choice(self.mainModul, wx.ID_ANY, choices=[])
		self.EdgeSelectionLabel = wx.StaticText(self.mainModul, wx.ID_ANY, _("select \nan \nedge"), style=wx.ALIGN_CENTRE)
		self.EdgeSelection = wx.Choice(self.mainModul, wx.ID_ANY, choices=[])
		self.totalAbs = wx.CheckBox(self.mainModul, wx.ID_ANY, _("Use Total Absorption"))
		self.panel_2 = wx.Panel(self.mainModul, wx.ID_ANY)
		self.label_4 = wx.StaticText(self.panel_2, wx.ID_ANY, _("The absorptionmodule comes later"))
		self.button_2 = wx.Button(self.panel_2, wx.ID_ANY, _("print variables"))
		self.supported_by = wx.StaticText(self.panel_2, wx.ID_ANY, _("This work was \nsupported by"))
		self.bitmap_2 = wx.StaticBitmap(self.panel_2, wx.ID_ANY, wx.Bitmap("C:\\Users\\juhlig\\Documents\\Magic_Briefcase\\ID26_emission_spectroscopy_tools\\python\\logo.png", wx.BITMAP_TYPE_ANY))
		self.static_line_4 = wx.StaticLine(self.mainModul, wx.ID_ANY)
		self.label_5 = wx.StaticText(self.mainModul, wx.ID_ANY, _("Inner variations works with Vectors"))
		self.what_inner = wx.Choice(self.mainModul, wx.ID_ANY, choices=[_("None"), _("Scan molar sample concentration in mMol/l"), _("Scan sample thickness in mm"), _("Scan incoming Energy (XANES)"), _("scan the m_factor")])
		self.innerlooplabel = wx.StaticText(self.mainModul, wx.ID_ANY, _("enter python\niterable for "))
		self.inner_loop = wx.TextCtrl(self.mainModul, wx.ID_ANY, "")
		self.label_6 = wx.StaticText(self.mainModul, wx.ID_ANY, _("Outer variation (loops) and colorcodes"))
		self.what_outer = wx.TextCtrl(self.mainModul, wx.ID_ANY, "")
		self.outer_loop_hints = wx.Choice(self.mainModul, wx.ID_ANY, choices=[])
		self.label_7 = wx.StaticText(self.mainModul, wx.ID_ANY, _("enter python\niterable for outer"))
		self.outer_loop = wx.TextCtrl(self.mainModul, wx.ID_ANY, "")
		self.close_plots = wx.Button(self.mainModul, wx.ID_ANY, _("close all plots"))
		self.RunSingle = wx.Button(self.mainModul, wx.ID_ANY, _("Run single (same like enter)"))
		self.button_1 = wx.Button(self.mainModul, wx.ID_ANY, _("Run Loop"))
		self.ExperimentLabel = wx.StaticText(self.mainModul, wx.ID_ANY, _("Experiment Name"))
		self.exp = wx.TextCtrl(self.mainModul, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.Comment = wx.TextCtrl(self.mainModul, wx.ID_ANY, "", style=wx.TE_MULTILINE)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.Theta)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.Phi)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.Thickness)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.DetecDis)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.DetecRadius)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.DetecLine)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.DetecAbsorb)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.BeamFlux)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.EnIn)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.EnOut)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.sample_formula)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.Absorber)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.conEnter)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.sample_2_formula)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.con2Enter)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.solvent_formula)
		self.Bind(wx.EVT_CHOICE, self.onSolventChoice, self.selectsolvent)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.SolDen)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.SolCon)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.m_fac)
		self.Bind(wx.EVT_CHOICE, self.onLineChoice, self.lines)
		self.Bind(wx.EVT_CHOICE, self.OnPseudo, self.pseudoName)
		self.Bind(wx.EVT_CHOICE, self.onEdgeSelection, self.EdgeSelection)
		self.Bind(wx.EVT_BUTTON, self.schniff, self.button_2)
		self.Bind(wx.EVT_CHOICE, self.onOuterLoppSelection, self.outer_loop_hints)
		self.Bind(wx.EVT_BUTTON, self.onClosePlots, self.close_plots)
		self.Bind(wx.EVT_BUTTON, self.onEnter, self.RunSingle)
		self.Bind(wx.EVT_BUTTON, self.onRunLoop, self.button_1)
		self.Bind(wx.EVT_TEXT_ENTER, self.onEnter, self.exp)
		# end wxGlade
		filemenu=wx.Menu()#generate a menu
		menuAbout=wx.Menu()#append something in the previous initialized menu
		menuOpen=filemenu.Append(wx.ID_OPEN,'&Open','select and open a previous experiment')
		menuExit=filemenu.Append(wx.ID_EXIT,'&Exit','Terminate the program')
		About=menuAbout.Append(wx.ID_ABOUT,'&About','Get some info')
		self.Bind(wx.EVT_MENU, self.OnOpen, menuOpen)
		self.Bind(wx.EVT_MENU, self.OnExit, menuExit)
		self.Bind(wx.EVT_MENU, self.OnAbout, About)
		menuBar=wx.MenuBar()#initialize a menubar	
		menuBar.Append(filemenu,'&File')#append to menuebar give the first one a name
		menuBar.Append(menuAbout,'&About')
		self.SetMenuBar(menuBar) #print menubar

	def __set_properties(self):
		self.file_path=os.path.dirname(os.path.realpath(__file__))
		self.database_path=self.file_path+os.sep+'databases'
		self.exp_base_path=self.file_path+os.sep+'experiments'
		self.zahlen,self.switches,self.text=pc.read_standard(exp='standard')
		self.zahlen.SIvalue=self.zahlen.value*self.zahlen.SIconvert
		self.zahlen.value[self.zahlen.value.isnull()]=None
		self.zahlen.SIvalue[self.zahlen.value.isnull()]=None
		self.za=self.zahlen.SIvalue;self.te=self.text.value;self.sw=self.switches.value;self.un=self.zahlen.units;self.zav=self.zahlen.value;self.zad=self.zahlen.description;self.swd=self.switches.description;self.ted=self.text.description
		self.Line_Names=pc.get_all_line_names()
		self.Shell_Names=pc.get_all_shell_names()
		self.pseudo_Names=pc.get_all_pseudo_names()
		self.standards=pd.read_csv(database_path+os.sep+'compound.csv',index_col=0)
		self.standards_list=self.standards.index
		self.set_values()
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle(_("Jens_Xray_Tools"))
		self.MainFrame_statusbar.SetStatusWidths([-1])
		# statusbar fields
		MainFrame_statusbar_fields = [_("MainFrame_statusbar")]
		for i in range(len(MainFrame_statusbar_fields)):
		    self.MainFrame_statusbar.SetStatusText(MainFrame_statusbar_fields[i], i)
		self.AngleLabel.SetBackgroundColour(wx.Colour(255, 255, 255))
		self.AngleLabel.SetForegroundColour(wx.Colour(0, 0, 0))
		self.Crystals.SetSelection(2)
		self.EnergyLabel.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 1, ""))
		self.EnInLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.EnIn.SetBackgroundColour(wx.Colour(255, 124, 106))
		self.EnIn.SetForegroundColour(wx.Colour(0, 0, 0))
		self.EnIn.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.EnOutLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.EnOut.SetBackgroundColour(wx.Colour(162, 255, 154))
		self.EnOut.SetForegroundColour(wx.Colour(0, 0, 0))
		self.EnOut.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.CountsLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.Counts.SetBackgroundColour(wx.Colour(135, 132, 255))
		self.Counts.SetForegroundColour(wx.Colour(0, 0, 0))
		self.Counts.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.SamlaneLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.con_type_choice.SetSelection(0)
		self.relation_choice.SetSelection(0)
		self.sam2laneLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.con2_type_choice.SetSelection(0)
		self.SolventlaneLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.pseudoName.SetToolTipString(_("Choose a pseudoname for a transition"))
		self.EdgeSelection.SetToolTipString(_("EdgeSelectionTool"))
		self.supported_by.SetFont(wx.Font(10, wx.DEFAULT, wx.SLANT, wx.BOLD, 0, ""))
		self.what_inner.SetSelection(0)
		self.exp.SetToolTipString(_("expTool"))
		# end wxGlade
		self.ThetaLabel.SetLabel('Theta in %s'%self.un['Theta'])
		self.PhiLabel.SetLabel('Phi in %s'%self.un['Phi'])
		self.DetecDisLabel.SetLabel('Detector-Sample Distance in %s'%self.un['DetecDis'])
		self.DetecRadiusLabel.SetLabel('crystal radius in %s'%self.un['DetecRadius'])
		self.EnInLabel.SetLabel('Energy from Source in %s'%self.un['EnIn'])
		self.EnOutLabel.SetLabel('Energy Out (deteced) in %s'%self.un['EnOut'])
		self.ThicknessLabel.SetLabel = ('Sample thickness in %s'%self.un['Thickness'])
		self.set_Toolstring()
	def set_choice_lists(self):
		self.selectsolvent = wx.Choice(self.panel_1, wx.ID_ANY, choices=self.standards_list)
		self.lines = wx.Choice(self.mainModul, wx.ID_ANY, choices=self.Line_Names)
		self.EdgeSelection = wx.Choice(self.mainModul, wx.ID_ANY, choices=self.Shell_Names)
		self.pseudoName = wx.Choice(self.mainModul, wx.ID_ANY, choices=self.pseudo_Names)
		self.listen=['Thickness','Theta','Phi','BeamFlux','Crystals','BeamSize','DetecReflec','DetecLine','DetecRadius','DetecDis','DetecAbsorb','EnIn','EnOut','SamMol','SamDen','Sam2Mol','Sam2Den','SolDen','SolCon','m_fac','SamRel']
		self.listen_what_inner=["None","mol","Thickness","EnIn","m_fac"]
		self.outer_loop_hints = wx.Choice(self.mainModul, wx.ID_ANY, choices=self.listen)
	def set_values(self):
		self.set_choice_lists()
		self.zahlen.value[self.zahlen.value.isnull()]=None
		self.zahlen.SIvalue[self.zahlen.value.isnull()]=None
		self.text.value[self.text.value.isnull()]=None
		try:
			self.lines.SetSelection(self.Line_Names.index(self.te['lines']))
		except:
			pass
		if not pd.isnull(self.zav['SamMol']):
			self.con_type_choice.SetSelection(0)
			self.conEnter.SetValue('%s'%self.zav['SamMol'])
		else:
			self.con_type_choice.SetSelection(1)
			self.conEnter.SetValue('%s'%self.zav['SamDen'])
		if not pd.isnull(self.zav['Sam2Mol']):
			self.con2_type_choice.SetSelection(0)
			self.con2Enter.SetValue('%s'%self.zav['Sam2Mol'])
		else:
			self.con2_type_choice.SetSelection(1)
			self.con2Enter.SetValue('%s'%self.zav['Sam2Den'])
		if '0' in self.sw['SamRel']:
			self.relation_choice.SetSelection(0)
			self.relationNumber.SetValue('')
		else:
			self.relation_choice.SetSelection(int(self.sw['SamRel']))
			self.relationNumber.SetValue('%s'%self.zav['SamRel'])
			self.conEnter.SetValue('')
		self.what_inner.SetSelection(self.listen_what_inner.index(self.te['what_inner']))
		
		self.Theta.SetValue('%s'%self.zav['Theta'])
		self.Phi.SetValue('%s'%self.zav['Phi'])
		self.Thickness.SetValue('%s'%self.zav['Thickness'])
		self.Crystals.SetSelection(int(self.zav['Crystals']-1))
		self.DetecDis.SetValue('%s'%self.zav['DetecDis'])
		self.DetecRadius.SetValue('%s'%self.zav['DetecRadius'])
		self.DetecLineLabel.SetToolTipString(_("DetecLineTool"))
		self.DetecLine.SetValue('%s'%self.zav['DetecLine'])
		self.DetecAbsorb.SetValue('%s'%self.zav['DetecAbsorb'])
		self.BeamFlux.SetValue('%s'%self.zav['BeamFlux'])
		self.EnIn.SetValue('%s'%self.zav['EnIn'])
		self.EnOut.SetValue('%s'%self.zav['EnOut'])
		self.sample_formula.SetValue('%s'%self.te['sample_formula'])
		self.sample_2_formula.SetValue('%s'%self.te['sample_2_formula'])
		self.Absorber.SetValue('%s'%self.te['Absorber'])
		self.solvent_formula.SetValue('%s'%self.te['solvent_formula'])
		self.SolDen.SetValue('%s'%self.zav['SolDen'])
		self.SolCon.SetValue('%s'%self.zav['SolCon'])
		self.m_fac.SetValue('%s'%self.zav['m_fac'])
		self.inner_loop.SetValue('%s'%self.te['inner_loop'])
		self.outer_loop.SetValue('%s'%self.te['outer_loop'])
		self.what_outer.SetValue('%s'%self.te['what_outer'])
		self.Comment.SetValue('%s'%self.te['comment'])
		if self.text.value['exp'] is not None:
			self.exp.SetValue('%s'%self.te['exp'])
		else:
			self.exp.SetValue('')
	def read_ctl(self,TextCtrl):
		'''little helper function to deal with the strange format of the wx.Textcontrol output'''
		value = TextCtrl.GetValue()
		try:
			val = eval(value,{},{})
		except:
			val = value
		if val == '#None#':
			# the special None string
			val = None
		elif val == '':
			val=None
		return val
	def read_values(self,exp='Standard'):
		####spectrometer part###############
		self.zahlen.value['Theta']=self.read_ctl(self.Theta)
		self.zahlen.value['Phi']=self.read_ctl(self.Phi)
		self.zahlen.value['Thickness']=self.read_ctl(self.Thickness)
		self.zahlen.value['Crystals']=self.Crystals.GetSelection()
		self.zahlen.value['DetecDis']=self.read_ctl(self.DetecDis)
		self.zahlen.value['DetecRadius']=self.read_ctl(self.DetecRadius)
		self.zahlen.value['DetecLine']=self.read_ctl(self.DetecLine)
		self.zahlen.value['DetecAbsorb']=self.read_ctl(self.DetecAbsorb)
		self.zahlen.value['BeamFlux']=self.read_ctl(self.BeamFlux)
		self.zahlen.value['EnIn']=self.read_ctl(self.EnIn)
		self.zahlen.value['EnOut']=self.read_ctl(self.EnOut)
		####read the sample stuff############
		self.switches.value['SamRel']=self.relation_choice.GetSelection()#here we just read the values
		self.zahlen.value['SamRel']=self.read_ctl(self.relationNumber)
		self.text.value['sample_formula']=str(self.read_ctl(self.sample_formula))
		self.text.value['Absorber']=str(self.read_ctl(self.Absorber))
		self.text.value['sample_2_formula']=str(self.read_ctl(self.sample_2_formula))
		self.text.value['solvent_formula']=str(self.read_ctl(self.solvent_formula))
		self.zahlen.value['SolDen']=self.read_ctl(self.SolDen)
		self.zahlen.value['SolCon']=self.read_ctl(self.SolCon)
		##s##ample 2 density
		if self.con2_type_choice.GetSelection() is 0:#we read in Molar
			self.zahlen.value['Sam2Mol']=self.read_ctl(self.con2Enter)
			self.zahlen.value['Sam2Den']=None
		else:#we read in mass density
			self.zahlen.value['Sam2Mol']=None 
			self.zahlen.value['Sam2Den']=self.read_ctl(self.con2Enter)

		###sample 1 density this should be after the formulas####
		if self.relation_choice.GetSelection() is 0:#ok we do not have any relation between the two samples so let's just read it
			if self.con_type_choice.GetSelection() is 0:#we read in Molar
				self.zahlen.value['SamMol']=self.read_ctl(self.conEnter)
				self.zahlen.value['SamDen']=None
			else:#we read in mass density
				self.zahlen.value['SamMol']=None
				self.zahlen.value['SamDen']=self.read_ctl(self.conEnter)
		else:
			self.zahlen.value['SamMol']=None
			self.zahlen.SIvalue=self.zahlen.value*self.zahlen.SIconvert
			if self.relation_choice.GetSelection() == 1:
				type='mp'
			elif self.relation_choice.GetSelection() == 2:
				type='ppm'
			else:
				raise IOError('something happened during the selection of relation')
			self.zahlen.value['SamDen']=pc.relation_wrapper(compound_1=self.text.value['sample_formula'],compound_2=self.text.value['sample_2_formula'],type_of_relation=type,relation_number=self.zahlen.SIvalue['SamRel'],Mol_density=self.zahlen.SIvalue['Sam2Mol'],Mass_density=self.zahlen.SIvalue['Sam2Den'])
			self.con_type_choice.SetSelection(1)
		self.zahlen.value['m_fac']=self.read_ctl(self.m_fac)
		if not self.lines.GetSelection() is -1:
			self.text.value['lines']=self.Line_Names[self.lines.GetSelection()]
		else:
			self.text.value['lines']=None
		self.zahlen.value['m_fac']=self.read_ctl(self.m_fac)
		self.text.value['what_inner']=str(self.listen_what_inner[self.what_inner.GetSelection()])
		self.text.value['what_outer']=str(self.what_outer.GetValue())
		self.text.value['inner_loop']=str(self.inner_loop.GetValue())
		self.text.value['outer_loop']=str(self.outer_loop.GetValue())
		self.text.value['comment']=self.read_ctl(self.Comment)
		if len(str(self.read_ctl(self.exp)))>1:
			self.text.value['exp']=str(self.read_ctl(self.exp))
		else:
			self.text.value['exp']=None
		self.zahlen.value[self.zahlen.value.isnull()]=None
		self.text.value[self.text.value.isnull()]=None			
		self.zahlen.SIvalue=self.zahlen.value*self.zahlen.SIconvert
		pc.write_standard((self.zahlen,self.switches,self.text),exp=exp)
		self.za=self.zahlen.SIvalue;self.te=self.text.value;self.sw=self.switches.value;self.un=self.zahlen.units;self.zav=self.zahlen.value;self.zad=self.zahlen.description;self.swd=self.switches.description;self.ted=self.text.description
	def set_Toolstring(self):
		self.Theta.SetToolTipString(_("%s"%self.zad['Theta']))
		self.Phi.SetToolTipString(_("%s"%self.zad['Phi']))
		self.DetecDis.SetToolTipString(_("%s"%self.zad['DetecDis']))
		self.DetecRadius.SetToolTipString(_("%s"%self.zad['DetecRadius']))
		self.DetecLineLabel.SetToolTipString(_("%s"%self.zad['DetecLine']))
		self.DetecLine.SetToolTipString(_("%s"%self.zad['DetecLine']))
		self.DetecAbsorb.SetToolTipString(_("%s"%self.zad['DetecAbsorb']))
		self.EnIn.SetToolTipString(_("%s"%self.zad['EnIn']))
		self.EnOut.SetToolTipString(_("%s"%self.zad['EnOut']))
		self.sample_formula.SetToolTipString(_("%s"%self.ted['sample_formula']))
		self.Absorber.SetToolTipString(_("%s"%self.ted['Absorber']))
		self.conEnter.SetToolTipString(_("enter the concentration with the units beside"))
		self.sample_2_formula.SetToolTipString(_("%s"%self.ted['sample_2_formula']))
		self.solvent_formula.SetToolTipString(_("%s"%self.ted['solvent_formula']))
		self.SolDen.SetToolTipString(_("%s"%self.zad['SolDen']))
		self.SolCon.SetToolTipString(_("%s"%self.zad['SolCon']))
		self.m_fac.SetToolTipString(_("%s"%self.zad['m_fac']))
		self.lines.SetToolTipString(_("%s"%self.ted['lines']))
		self.BeamFlux.SetToolTipString(_("This is the flux from the beamline this is a constant which goes linear in the equations"))
		self.totalAbs.SetToolTipString(_("select do use total basorption crossection"))
		self.what_inner.SetToolTipString(_("select the value you want to loop over (it should print thison the x-axis)"))
		self.inner_loop.SetToolTipString(_("give something iterable for python like range(start,stop,step) for ints or arange(start,stop,step) for floats or a direct list [a,b,c]"))
		self.outer_loop.SetToolTipString(_("give something iterable for python like range(start,stop,step) for ints or arange(start,stop,step) for floats or a direct list [a,b,c]"))
		self.what_outer.SetToolTipString(_("enter here one inner variable to loop over, use the selection to the right for some hints"))
		self.lines.SetToolTipString(_("choose one line from the list to use its energy and print all expected intensity"))
		self.relationNumber.SetToolTipString(_("Punch number for relation between first and second sample"))
		self.Crystals.SetToolTipString(_("define here how many crystals are in the setup"))
		self.selectsolvent.SetToolTipString(_("select a solvent name from the stored values density and name will be added"))
		self.what_inner.SetToolTipString(_("choose one of these value to be iterated,\n we use the inner loop here so everthing should be fast and easy\n this change will be printed as x-axis on a plot"))
		self.exp.SetToolTipString(_("this is the name of the experiment type something and your entries will be saved in a folder with this name no spaces!"))
		self.Thickness.SetToolTipString(_("Punch here the thickness of all the materials mentioned in sample, at the moment we can not treath non homogen samples"))
	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		grid_sizer_3 = wx.FlexGridSizer(2, 2, 2, 2)
		grid_sizer_6 = wx.FlexGridSizer(7, 1, 10, 0)
		sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_27 = wx.BoxSizer(wx.VERTICAL)
		sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_25 = wx.BoxSizer(wx.VERTICAL)
		sizer_22 = wx.BoxSizer(wx.VERTICAL)
		sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_20 = wx.BoxSizer(wx.VERTICAL)
		sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_18 = wx.BoxSizer(wx.VERTICAL)
		sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.VERTICAL)
		Solventlane = wx.BoxSizer(wx.HORIZONTAL)
		sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
		sample2lane = wx.BoxSizer(wx.HORIZONTAL)
		sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
		relationlane = wx.BoxSizer(wx.HORIZONTAL)
		samplelane = wx.BoxSizer(wx.HORIZONTAL)
		sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_4 = wx.FlexGridSizer(23, 1, 0, 0)
		grid_sizer_5 = wx.FlexGridSizer(1, 2, 0, 0)
		grid_sizer_4.Add(self.AngleLabel, 0, wx.EXPAND, 0)
		grid_sizer_5.Add(self.ThetaLabel, 0, wx.EXPAND, 0)
		grid_sizer_5.Add(self.PhiLabel, 0, wx.EXPAND, 0)
		grid_sizer_5.Add(self.Theta, 0, 0, 0)
		grid_sizer_5.Add(self.Phi, 0, 0, 0)
		grid_sizer_4.Add(grid_sizer_5, 1, wx.EXPAND, 0)
		grid_sizer_4.Add(self.ThicknessLabel, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.Thickness, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.bitmap_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		grid_sizer_4.Add(self.Crystals, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
		grid_sizer_4.Add(self.DetecDisLabel, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
		grid_sizer_4.Add(self.DetecDis, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_4.Add(self.DetecRadiusLabel, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
		grid_sizer_4.Add(self.DetecRadius, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.DetecLineLabel, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.DetecLine, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.DetecAbsorbLabel, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.DetecAbsorb, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.BeamFluxLabel, 0, 0, 0)
		grid_sizer_4.Add(self.BeamFlux, 0, wx.EXPAND, 0)
		grid_sizer_4.Add((20, 5), 0, 0, 0)
		grid_sizer_4.Add(self.EnergyLabel, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.EnInLabel, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.EnIn, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
		grid_sizer_4.Add(self.EnOutLabel, 0, wx.EXPAND, 0)
		grid_sizer_4.Add(self.EnOut, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
		grid_sizer_4.Add(self.CountsLabel, 0, 0, 0)
		grid_sizer_4.Add(self.Counts, 0, wx.EXPAND, 0)
		self.Crystal_based.SetSizer(grid_sizer_4)
		self.DetecSetup.AddPage(self.Crystal_based, _("crystal based"))
		self.DetecSetup.AddPage(self.DirectBased, _("direct detection"))
		grid_sizer_3.Add(self.DetecSetup, 1, wx.EXPAND, 0)
		samplelane.Add(self.SamlaneLabel, 0, 0, 0)
		samplelane.Add((20, 20), 0, 0, 0)
		sizer_8.Add(self.sample_formulaLabel, 0, 0, 0)
		sizer_8.Add(self.sample_formula, 0, wx.EXPAND, 0)
		sizer_8.Add(self.Absorber, 0, 0, 0)
		samplelane.Add(sizer_8, 1, wx.EXPAND, 1)
		sizer_9.Add(self.concentrationLabel, 0, 0, 0)
		sizer_9.Add(self.conEnter, 0, 0, 0)
		sizer_9.Add(self.con_type_choice, 0, 0, 0)
		samplelane.Add(sizer_9, 1, wx.EXPAND, 1)
		sizer_7.Add(samplelane, 1, wx.ALL | wx.EXPAND, 1)
		sizer_7.Add((20, 15), 0, 0, 0)
		relationlane.Add((10, 20), 0, 0, 0)
		relationlane.Add(self.relationLabel, 0, 0, 0)
		relationlane.Add(self.relation_choice, 0, 0, 0)
		relationlane.Add(self.relationNumber, 0, 0, 0)
		relationlane.Add(self.relation_additionLabel, 0, 0, 0)
		sizer_7.Add(relationlane, 1, wx.ALL | wx.EXPAND, 1)
		sizer_7.Add((20, 15), 0, 0, 0)
		sample2lane.Add(self.sam2laneLabel, 0, 0, 0)
		sample2lane.Add((20, 20), 0, 0, 0)
		sizer_12.Add(self.sample2_formulaLabel, 0, 0, 0)
		sizer_12.Add(self.sample_2_formula, 0, 0, 0)
		sample2lane.Add(sizer_12, 1, wx.EXPAND, 1)
		sizer_13.Add(self.con2label, 0, 0, 0)
		sizer_13.Add(self.con2Enter, 0, 0, 0)
		sizer_13.Add(self.con2_type_choice, 0, 0, 0)
		sample2lane.Add(sizer_13, 1, wx.EXPAND, 1)
		sizer_7.Add(sample2lane, 1, wx.ALL | wx.EXPAND, 1)
		sizer_7.Add((20, 15), 0, 0, 0)
		Solventlane.Add(self.SolventlaneLabel, 0, 0, 0)
		Solventlane.Add((20, 20), 0, 0, 0)
		sizer_14.Add(self.solvent_formulaLabel, 0, 0, 0)
		sizer_14.Add(self.solvent_formula, 0, 0, 0)
		sizer_14.Add(self.selectsolvent, 0, 0, 0)
		Solventlane.Add(sizer_14, 1, wx.EXPAND, 1)
		sizer_15.Add(self.SolDenLabel, 0, 0, 0)
		sizer_15.Add(self.SolDen, 0, 0, 0)
		sizer_15.Add(self.SolConLabel, 0, 0, 0)
		sizer_15.Add(self.SolCon, 0, 0, 0)
		Solventlane.Add(sizer_15, 1, wx.EXPAND, 1)
		sizer_7.Add(Solventlane, 1, wx.ALL | wx.EXPAND, 1)
		self.panel_1.SetSizer(sizer_7)
		grid_sizer_6.Add(self.panel_1, 1, wx.EXPAND, 0)
		sizer_16.Add(self.m_faclabel, 0, 0, 0)
		sizer_16.Add(self.m_fac, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add((20, 20), 0, 0, 0)
		sizer_16.Add(self.linesLabel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add(self.lines, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add(self.pseudoName, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add((20, 20), 0, 0, 0)
		sizer_16.Add(self.EdgeSelectionLabel, 0, 0, 0)
		sizer_16.Add(self.EdgeSelection, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add((20, 20), 0, 0, 0)
		sizer_16.Add(self.totalAbs, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_6.Add(sizer_16, 1, wx.EXPAND, 0)
		sizer_18.Add(self.label_4, 0, 0, 0)
		sizer_1.Add((20, 50), 0, 0, 0)
		sizer_1.Add(self.button_2, 2, wx.EXPAND, 0)
		sizer_1.Add((100, 20), 0, 0, 0)
		sizer_1.Add(self.supported_by, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_1.Add(self.bitmap_2, 0, 0, 0)
		sizer_18.Add(sizer_1, 1, wx.EXPAND, 0)
		self.panel_2.SetSizer(sizer_18)
		grid_sizer_6.Add(self.panel_2, 1, wx.EXPAND, 0)
		grid_sizer_6.Add(self.static_line_4, 0, wx.EXPAND, 0)
		sizer_20.Add(self.label_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		sizer_20.Add(self.what_inner, 0, wx.EXPAND, 0)
		sizer_21.Add(self.innerlooplabel, 0, 0, 0)
		sizer_21.Add(self.inner_loop, 0, wx.EXPAND, 0)
		sizer_20.Add(sizer_21, 1, wx.EXPAND, 0)
		sizer_19.Add(sizer_20, 1, wx.EXPAND, 0)
		sizer_22.Add(self.label_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		sizer_23.Add(self.what_outer, 0, 0, 0)
		sizer_23.Add(self.outer_loop_hints, 0, 0, 0)
		sizer_22.Add(sizer_23, 1, wx.EXPAND, 0)
		sizer_24.Add(self.label_7, 0, 0, 0)
		sizer_24.Add(self.outer_loop, 0, wx.EXPAND, 0)
		sizer_22.Add(sizer_24, 1, wx.EXPAND, 0)
		sizer_19.Add(sizer_22, 1, wx.EXPAND, 0)
		sizer_25.Add(self.close_plots, 0, wx.EXPAND, 0)
		sizer_25.Add(self.RunSingle, 0, wx.EXPAND, 0)
		sizer_25.Add(self.button_1, 1, wx.EXPAND, 0)
		sizer_19.Add(sizer_25, 1, wx.EXPAND, 0)
		grid_sizer_6.Add(sizer_19, 1, wx.EXPAND, 0)
		sizer_27.Add(self.ExperimentLabel, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		sizer_27.Add(self.exp, 0, wx.EXPAND, 0)
		sizer_26.Add(sizer_27, 1, wx.EXPAND, 0)
		sizer_26.Add(self.Comment, 3, wx.EXPAND, 0)
		grid_sizer_6.Add(sizer_26, 1, wx.EXPAND, 0)
		self.mainModul.SetSizer(grid_sizer_6)
		grid_sizer_3.Add(self.mainModul, 1, wx.EXPAND, 0)
		grid_sizer_3.Add((20, 20), 0, 0, 0)
		self.SetSizer(grid_sizer_3)
		grid_sizer_3.Fit(self)
		self.Layout()
		# end wxGlade
	def OnOpen(self, event):  # wxGlade: MyFrame.<event_handler>
		dlg = wx.DirDialog(self, message='Choose an experiment folder', defaultPath=self.exp_base_path+os.sep+'standard',style=wx.DD_DEFAULT_STYLE)
		if dlg.ShowModal() == wx.ID_OK:
			dir = dlg.GetPath()
			dirname=os.path.split(os.path.normpath(dir))[1]
			#print pc.read_standard(exp=dirname)	
			self.zahlen,self.switches,self.text=pc.read_standard(exp=dirname)
			self.zahlen.SIvalue=self.zahlen.value*self.zahlen.SIconvert
			self.za=self.zahlen.SIvalue;self.te=self.text.value;self.sw=self.switches.value;self.un=self.zahlen.units;self.zav=self.zahlen.value;self.zad=self.zahlen.description;self.swd=self.switches.description;self.ted=self.text.description
		dlg.Destroy()
		self.set_values()
	def OnSave(self, event):  # wxGlade: MyFrame.<event_handler>
		dlg = wx.DirDialog(self, message='Choose an experiment folder', defaultPath=self.exp_base_path+os.sep+'standard',style=wx.DD_DEFAULT_STYLE)
		if dlg.ShowModal() == wx.ID_OK:
			dir = dlg.GetPath()
			dirname=os.path.split(os.path.normpath(dir))[1]
			self.exp.SetValue('%s'%dirname)
			self.read_values()
			self.read_values(exp=str(self.read_ctl(self.exp)))
		dlg.Destroy()
		self.set_values()
	def OnExit(self, event):  # wxGlade: MyFrame.<event_handler>
		self.Close(True)
	def onEnter(self, event):  # wxGlade: MyFrame.<event_handler>
		self.read_values()
		if len(str(self.read_ctl(self.exp)))>1:
			self.read_values(exp=str(self.read_ctl(self.exp)))
		self.Counts.SetValue('%.2g'%pc.emission_detection(Input=(self.zahlen,self.switches,self.text)))
	def OnAbout(self,event):
		dlg=wx.MessageDialog( self, "Jens Xray tools for predicting signal strength", "About Jens Xray Tools", wx.OK)
		dlg.ShowModal() # Show it
		dlg.Destroy() # finally destroy it when finished.
	def onSolventChoice(self, event):  # wxGlade: MyFrame.<event_handler>
		self.solvent_formula.SetValue(self.standards_list[event.GetInt()])
		self.SolDen.SetValue('%s'%(self.standards.Density[self.standards_list[event.GetInt()]]/self.zahlen.SIconvert['SamDen']))
	def onLineChoice(self, event):  # wxGlade: MyFrame.<event_handler>
		a=str(self.read_ctl(self.Absorber))
		b=self.Line_Names[event.GetInt()]
		temp=pc.get_LineEnergy(a,b)
		self.EnOut.SetValue('%.2f'%temp)
	def onClosePlots(self, event):  # wxGlade: MyFrame.<event_handler>
		pc.pylab.close('all')
	def onRunLoop(self, event):  # wxGlade: MyFrame.<event_handler>
		self.read_values()
		if len(str(self.read_ctl(self.exp)))>1:
			self.read_values(exp=str(self.read_ctl(self.exp)))
		pc.run_loop_from_save(output=False)
	def onOuterLoppSelection(self, event):  # wxGlade: MyFrame.<event_handler>
		self.what_outer.SetValue(self.listen[event.GetInt()])
	def schniff(self, event):  # wxGlade: MyFrame.<event_handler>
		self.read_values()
		print self.zahlen,self.switches,self.text
	def onEdgeSelection(self, event):  # wxGlade: MyFrame.<event_handler>
		a=pc.Atoms_number(str(self.read_ctl(self.Absorber)))
		b=event.GetInt()
		temp=pc.get_EdgeEnergy(a,b)[0]
		self.EnIn.SetValue('%.2f'%temp)
		self.zahlen.value['EnIn']=self.read_ctl(self.EnIn)
		self.zahlen.SIvalue=self.zahlen.value*self.zahlen.SIconvert
		self.za=self.zahlen.SIvalue;self.te=self.text.value;self.sw=self.switches.value;self.un=self.zahlen.units;self.zav=self.zahlen.value;self.zad=self.zahlen.description;self.swd=self.switches.description;self.ted=self.text.description
	def OnPseudo(self, event):  # wxGlade: MyFrame.<event_handler>
		_,_,pseudo_series=pc.read_lib_entries()
		temp=str(self.pseudo_Names[event.GetInt()])
		b=pseudo_series[temp]
		self.lines.SetSelection(self.Line_Names.index(pseudo_series[temp]))
		a=str(self.read_ctl(self.Absorber))
		temp=pc.get_LineEnergy(a,b)
		self.EnOut.SetValue('%.2f'%temp)
# end of class MyFrame
if __name__ == "__main__":
	gettext.install("app") # replace with the appropriate catalog name

	app = wx.PySimpleApp(0)
	wx.InitAllImageHandlers()
	Jens_Xray_tools = MyFrame(None, wx.ID_ANY, "")
	app.SetTopWindow(Jens_Xray_tools)
	Jens_Xray_tools.Show()
	app.MainLoop()